	TITLE   DSKDRV - MSXDOS disk driver for MSX-IoT hardware -
	.Z80
	
;How to compile:
;  1) RunCPM
;  1.1) M80 =dskdrv.mac
;  1.2) l80 /p:4000,/d:f237,doshead,bios,msxdos,smldisp,init,dskbasic,msxdata,dskdrv,basdata,msxdos/n/x/y/e
;  2) hex2bin -e rom -l 4000 a\0\msxdos.hex

;28815 - 23438 = 5377
;28815 - 26510 = 2305

; External variables & routines
CHPUT   	EQU     000A2H
CALBAS		EQU		00159H
ERRHAND 	EQU     0406FH
FRMEVL  	EQU     04C64H
CHRGTR  	EQU     04666H
VALTYP  	EQU     0F663H
USR     	EQU     0F7F8H
PROCNM		EQU		0FD89H
;ENASLT  	EQU     00024H          ;enable slot
;RSLREG  	EQU     00138H          ;read primary slot select register
;RSLGREG 	EQU		00138H
;BOTTOM		EQU		0FC48H
;HIMEM		EQU		0FC4AH
;SLTWRK		EQU		0FD09H
;EXPTBL  	EQU     0FCC1H          ;slot is expanded or not
;CALSLT		EQU		0001CH

; symbols which can be used from the kernel

; GETSLT	get my slotid
; DIV16		divide

EXTRN		GETWRK          ;get base  of  work  area  in  [IX]  and
							;[HL]
; SETINT	install my interrupt handler
; PRVINT	call orginal interrupt handler
EXTRN		SETINT,PRVINT
; PROMPT	prompt for phantom drive
; RAWFLG	verify flag
; $SECBUF	temporary sectorbuffer
EXTRN		$SECBUF
; XFER		transfer to TPA
; DISINT	inform interrupts are being disabled
; ENAINT	inform interrupts are being enabled
;EXTRN		PROCNM			;CALL statement name

; symbols which must be defined by the driver

; INIHRD	initialize diskdriver hardware
; DRIVES	how many drives are connected
; INIENV	initialize diskdriver workarea
; DSKIO		diskdriver sector i/o
; DSKCHG	diskdriver diskchange status
; GETDPB	build Drive Parameter Block
; CHOICE	get format choice string
; DSKFMT	format disk
; MTOFF		stop diskmotor
; OEMSTA	diskdriver special call statements

; MYSIZE	size of diskdriver workarea
; SECLEN	size of biggest sector supported by the diskdriver
; DEFDPB	pointer to a default Drive Parameter Block



; errorcodes used by DSKIO, DSKCHG and GETDPB
;
; 0	write protect error
; 2	not ready error
; 4	data (crc) error
; 6	seek error
; 8	record not found error
; 10	write fault error
; 12	other error

; errorcodes used by DSKFMT
;
; 0	write protect error
; 2	not ready error
; 4	data (crc) error
; 6	seek error
; 8	record not found error
; 10	write fault error
; 12	bad parameter
; 14	insufficient memory
; 16	other error

	PUBLIC	MYSIZE
MYSIZE		equ	1		; Size of environment
	PUBLIC	SECLEN
SECLEN		equ	512		; Size of biggest sector

;----Commands----
CMD_SENDSTR	EQU		0E0H
CMD_FSAVE	EQU		0E1H
CMD_WRITE	EQU		0F0H
CMD_READ	EQU		0F1H
CMD_INIHRD	EQU		0F2H
CMD_INIENV	EQU		0F3H
CMD_DRIVES	EQU		0F4H
CMD_DSKCHG	EQU		0F5H
CMD_CHOICE	EQU		0F6H
CMD_DSKFMT	EQU		0F7H
CMD_OEMSTAT	EQU		0F8H
CMD_MTOFF	EQU		0F9H
CMD_GETDPB	EQU		0FAH

;----I/O Ports----
PORT_CMD	EQU		1
PORT_DATA	EQU		0

WriteByte:
	OUT		(PORT_DATA),A
	EX 		(SP),HL		;19 cycles
	EX		(SP),HL		;19 cycles
	RET

WriteCommand:
	OUT		(PORT_CMD),A
	EX		(SP),HL
	EX		(SP),HL
	RET

WriteBlock:
	OUTI
	EX		(SP),HL
	EX		(SP),HL
	JR		NZ,WriteBlock
	RET

ReadBlock:
	IN		D,(C)
	LD		(HL),D
	XOR		D		; CHECKSUM XOR8 EN EL ACUMULADOR
	INC		HL
	EX		(SP),HL
	EX		(SP),HL
	DJNZ	ReadBlock
	RET

; INIHRD
;
; Input:	None
; Output:	None
; Changed:	AF,BC,DE,HL,IX,IY may be affected

	PUBLIC	INIHRD
INIHRD:
	LD		A,CMD_INIHRD
	CALL	WriteCommand
	RET

; DRIVES
;
; Input: 	F	Zx set if to return physical drives
;			Zx reset if to return at least 2 drives, if only one
;			  physical drive it becomes a phantom drive
; Output:	L	number of drives
; Changed:	F,HL,IX,IY may be affected
;
; Remark:	DOS1 does not handle L=0 correctly

	PUBLIC	DRIVES
DRIVES:
	PUSH	AF
	LD		A,CMD_DRIVES
	CALL	WriteCommand
	POP		AF
	LD		L,1
	RET

; INIENV
;
; Input: 	None
; Output:	None
; Changed:	AF,BC,DE,HL,IX,IY may be affected
;
; Remark:	examples installs own interrupt handler, but this is NOT required.
;		depends on the hardware if this is needed.

	PUBLIC	INIENV
INIENV:
	LD		A,CMD_INIENV
	CALL	WriteCommand
	CALL	GETWRK
	LD		(HL),1
	LD		HL,INTHAND
	JP		SETINT

INTHAND:	
	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	PUSH	IX
	PUSH	IY
	call	GETWRK
	inc		(hl)
	pop		iy
	pop		ix
	pop		hl
	pop		de
	pop		bc
	pop		af
	jp		PRVINT

;
; DSKIO
;
; Input: 	A	Drivenumber
;		F	Cx reset for read
;			Cx set for write
; 		B	number of sectors
; 		C	Media descriptor
;		DE	logical sectornumber
; 		HL	transferaddress
; Output:	F	Cx set for error
;			Cx reset for ok
;		A	if error, errorcode
;		B	if error, remaining sectors
; Changed:	AF,BC,DE,HL,IX,IY may be affected

	PUBLIC	DSKIO
DSKIO:
	PUSH	AF
	JP      NC,READ         ;if no carry, we should read
WRITE:
	LD		A,CMD_WRITE		;write
	CALL	WriteCommand
	POP		AF				;drive number
	CALL	WriteByte
	LD		A,B				;n-sectors
	CALL	WriteByte
	LD		A,C				;media
	CALL	WriteByte
	LD		A,H
	CALL	WriteByte
	LD		A,L
	CALL	WriteByte
	LD		A,D				;sec Hi
	CALL	WriteByte
	LD		A,E				;sec Lo
	CALL	WriteByte
WRSEC:
	PUSH	BC				;only B matters
	LD		BC,0			;B=0 to count until 256, C=0 for OUTI
	CALL	WriteBlock		;256 bytes
	CALL	WriteBlock		;256 bytes
	POP		BC
	DJNZ	WRSEC			;relative jump
	;ld		a,12
	scf
	ccf						;no errors
	ret
	
READ:
	LD		A,CMD_READ		;read
	CALL	WriteCommand
	POP		AF				;drive number
	CALL	WriteByte		
	LD		A,B				;n-sectors
	CALL	WriteByte		
	LD		A,C				;media
	CALL	WriteByte
	LD		A,H
	CALL	WriteByte
	LD		A,L
	CALL	WriteByte
	LD		A,D				;sec H
	CALL	WriteByte
	LD		A,E				;sec L
	CALL	WriteByte
RDSEC:
	PUSH	BC				;only B matters
	LD		BC,0			;B=0 to count until 256 bytes, C=0 for INI
	XOR		A				;calculated checksum
	CALL	ReadBlock		;256 bytes
	CALL	ReadBlock		;256 bytes
	;INC		C				;C=1
	;IN		D,(C)			;remote checksum
	POP		BC
	;CP		D				;compare checksums
	;JR		Z,RDS_CONTINUE
	;SCF
	;LD		A,4				;checksum error
	;RET
RDS_CONTINUE:
	DJNZ	RDSEC			;relative jump
	;ld		a,12
	scf
	ccf						;no errors
	ret


; DSKCHG
;
; Input: 	A	Drivenumber
; 		B	0
; 		C	Media descriptor
; 		HL	pointer to DPB
; Output:	F	Cx set for error
;			Cx reset for ok
;		A	if error, errorcode
;		B	if no error, disk change status
;			01 disk unchanged
;			00 unknown
;			FF disk changed
; Changed:	AF,BC,DE,HL,IX,IY may be affected
; Remark:	DOS1 kernel expects the DPB updated when disk change status is unknown or changed
;		DOS2 kernel does not care if the DPB is updated or not

	PUBLIC	DSKCHG
DSKCHG:
	OR		A
	LD		B,1
	RET

; GETDPB
;
; Input: 	A	Drivenumber
; 		B	first byte of FAT
; 		C	Media descriptor
; 		HL	pointer to DPB
; Output:	[HL+1]
;		..
;		[HL+18]	updated
; Changed:	AF,BC,DE,HL,IX,IY may be affected

	PUBLIC	GETDPB
GETDPB:
	PUSH	AF
	LD		A,CMD_GETDPB
	CALL	WriteCommand
	POP		AF
	OR		A			;???
	EX		DE,HL		;porque no existe LD DE,HL
	INC		DE
	LD		HL,DpbTable
	LD		BC,18
	LDIR
	RET

DpbTable:
	db		0F9h	; Media F9
	dw		512		; 80 Tracks
	db		0Fh		; 9 sectors
	db		04h		; 2 sides
	db		01h		; 3.5" 720 Kb
	db		02h
	dw		1
	db		2
	db		112
	dw		14
	dw		714
	db		3
	dw		7

	PUBLIC	DEFDPB
DEFDPB		equ	DpbTable-1



; CHOICE
;
; Input: 	None
; Output:	HL	pointer to choice string, 0 if no choice
; Changed:	AF,BC,DE,HL,IX,IY may be affected

	PUBLIC	CHOICE
CHOICE:
	;LD		HL,S_CHOICE
	;LD		BC,8
	;CALL	SENDSTR
	LD		A,CMD_CHOICE
	CALL	WriteCommand
	ld		hl,ChoiceStr
	ret

ChoiceStr:	
	db		13,10
	db		"1 - Choice A",13,10
	db		"2 - Choice B",13,10
	db		13,10
	db		0



; DSKFMT
;
; Input: 	A	choicecode (1-9)
;		D	drivenumber
;		HL	begin of workarea
;		BC	length of workarea
; Output:	F	Cx set for error
;			Cx reset for ok
;		A	if error, errorcode
; Changed:	AF,BC,DE,HL,IX,IY may be affected

	PUBLIC	DSKFMT
DSKFMT:
	;LD		HL,S_DSKFMT
	;LD		B,8
	;CALL	SENDSTR
	LD		A,CMD_DSKFMT
	CALL	WriteCommand
	ld		a,16
	scf
	ret



; OEMSTATEMENT
;
; Input:	HL	basicpointer
; Output:	F	Cx set if statement not recognized
;			Cx reset if statement is recognized
;		HL	basicpointer,	updated if recognized
;					unchanged if not recognized
; Changed:	AF,BC,DE,HL,IX,IY may be affected

	PUBLIC	OEMSTATEMENT
OEMSTATEMENT:
; BASIC CALL EXTENSION handler
	PUSH    HL
	LD		HL,CMDS	        ; Table with CALL extensions
.CHKCMD:
	LD		DE,PROCNM
.LOOP:		
	LD		A,(DE)
	CP		(HL)
	JR		NZ,.TONEXTCMD	; Not equal
	INC		DE
	INC		HL
	AND		A
	JR		NZ,.LOOP		; No end of command name, go checking
	LD		E,(HL)
	INC		HL
	LD		D,(HL)
	POP		HL				; routine address
	CALL	GETPREVCHAR
	CALL	.CALLDE			; Call routine
	AND		A
	RET

.TONEXTCMD:
	LD		C,0FFH
	XOR		A
	CPIR					; Skip to end of command name
	INC		HL
	INC		HL				; Skip address
	CP		(HL)
	JR		NZ,.CHKCMD		; Not end of table, go checking
	POP		HL
    SCF
	RET
	
.CALLDE:
	PUSH	DE
	RET

GETPREVCHAR:
	DEC		HL
	LD		IX,CHRGTR
	JP      CALBAS

;---------------------------
CMDS:
; List of available commands (as ASCIIZ) and execute address (as word)

	DEFB	"FFILES",0
	DEFW	_FFILES
	DEFB	"FSAVE",0
	DEFW	_FSAVE
	DEFB	0               ; No more commands

PRINTHEX:
	PUSH	AF
	PUSH	AF
    CALL 	_Num1
	CALL	CHPUT
	POP		AF
	CALL 	_Num2
	CALL	CHPUT
	POP		AF
	RET  	; return with hex number in de
_Num1:
	RRA
	RRA
	RRA
	RRA
_Num2:       
	OR		0F0h
	DAA
	ADD 	A,0A0h
	ADC 	A,040h ; Ascii hex at this point (0 to F)   
	RET	

_FFILES:
	PUSH	HL
	LD		HL,$SECBUF
	LD		A,H
	CALL	PRINTHEX
	LD		A,L
	CALL	PRINTHEX
	LD		A,13
	CALL	CHPUT
	LD		A,10
	CALL	CHPUT
;	LD		HL,PR_LEN
;	LD		A,H
;	CALL	PRINTHEX
;	LD		A,L
;	CALL	PRINTHEX
	LD		A,13
	CALL	CHPUT
	LD		A,10
	CALL	CHPUT
;	LD		HL,PW_LEN
;	LD		A,H
;	CALL	PRINTHEX
;	LD		A,L
;	CALL	PRINTHEX
	LD		A,13
	CALL	CHPUT
	LD		A,10
	CALL	CHPUT
	POP		HL
	OR		A
	RET

_FSAVE:
	;CALL	_STRCMD
	LD		A,CMD_FSAVE
	CALL	WriteCommand
	OR		A
	RET
	
; MTOFF
;
; Input:	None
; Output:	None
; Changed:	AF,BC,DE,HL,IX,IY may be affected

	PUBLIC	MTOFF
MTOFF:
	;LD		HL,S_MTOFF
	;LD		B,7
	;CALL	SENDSTR
	LD		A,CMD_MTOFF
	CALL	WriteCommand
	ret

_STRCMD:
	PUSH	AF
	CALL	EVALTXTPARAM	; Evaluate text parameter
	PUSH	HL
    CALL    GETSTRPNT
	CALL	SENDSTR
	POP		HL
	POP		AF
	;OUT		(CMDPORT),A
	;CALL	DEMORA
	CALL	WriteCommand
	OR      A
	RET

SENDSTR:
	LD		A,CMD_SENDSTR
	CALL	WriteCommand
SENDSTR_LOOP:
	LD		A,(HL)
	CALL	WriteByte
	INC		HL
	DJNZ	SENDSTR_LOOP
	RET

;---------------------------
GETSTRPNT:
; OUT:
; HL = String Address
; B  = Lenght

	LD      HL,(USR)
	LD      B,(HL)
	INC     HL
	LD      E,(HL)
	INC     HL
	LD      D,(HL)
	EX      DE,HL
	RET

EVALTXTPARAM:
	CALL	CHKCHAR
	DEFB	"("             ; Check for (
	LD		IX,FRMEVL
	CALL	CALBAS			; Evaluate expression
	LD      A,(VALTYP)
	CP      3               ; Text type?
	JP      NZ,TYPE_MISMATCH
	CALL	CHKCHAR
	DEFB	")"             ; Check for )
	RET

CHKCHAR:
	CALL	GETPREVCHAR		; Get previous basic char
	EX		(SP),HL
	CP		(HL) 	        ; Check if good char
	JR		NZ,SYNTAX_ERROR	; No, Syntax error
	INC		HL
	EX		(SP),HL
	INC		HL				; Get next basic char

TYPE_MISMATCH:
	LD      E,13
	DB      1

SYNTAX_ERROR:
	LD      E,2
	LD		IX,ERRHAND		; Call the Basic error handler
	JP		CALBAS

S_INIHRD:
	DB	"INIHRD", 13, 10
S_DRIVES:
	DB	"DRIVES", 13, 10
S_INIENV:
	DB	"INIENV", 13, 10
S_DSKIO:
	DB	"DSKIO", 13, 10
S_DSKCHG:
	DB	"DSKCHG", 13, 10
S_GETDPB:
	DB	"GETDPB", 13, 10
S_CHOICE:
	DB	"CHOICE", 13, 10
S_DSKFMT:
	DB	"DSKFMT", 13, 10
S_OEMSTATEMENT:
	DB	"OEMSTATEMENT", 13, 10
S_MTOFF:
	DB	"MTOFF", 13, 10

	END
